//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: AutoBackupper.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "guibase.h"


// Declare the bitmap loading function
extern void wxCEEDFInitBitmapResources();

static bool bBitmapLoaded = false;


NewTriggerDialogBase::NewTriggerDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCEEDFInitBitmapResources();
        bBitmapLoaded = true;
    }
    this->Hide();
    
    wxBoxSizer* sizerNewTrigger = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(sizerNewTrigger);
    
    wxBoxSizer* sizerControls = new wxBoxSizer(wxHORIZONTAL);
    
    sizerNewTrigger->Add(sizerControls, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString radioBoxFrequencyArr;
    radioBoxFrequencyArr.Add(_("One Time"));
    radioBoxFrequencyArr.Add(_("Daily"));
    radioBoxFrequencyArr.Add(_("Weekly"));
    radioBoxFrequency = new wxRadioBox(this, wxID_ANY, _("Frequency"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), radioBoxFrequencyArr, 1, 0);
    radioBoxFrequency->SetSelection(0);
    
    sizerControls->Add(radioBoxFrequency, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerDateTimeRecurrence = new wxBoxSizer(wxVERTICAL);
    
    sizerControls->Add(sizerDateTimeRecurrence, 0, 0, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerDateTime = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Start date and time")), wxHORIZONTAL);
    
    sizerDateTimeRecurrence->Add(sizerDateTime, 0, wxALL, WXC_FROM_DIP(5));
    
    datePickerStart = new wxDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxDP_DROPDOWN);
    
    sizerDateTime->Add(datePickerStart, 0, wxALL, WXC_FROM_DIP(5));
    
    timePickerStart = new wxTimePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTP_DEFAULT);
    
    sizerDateTime->Add(timePickerStart, 0, wxALL, WXC_FROM_DIP(5));
    
    panelRecurrenceDays = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL|wxBORDER_THEME);
    
    sizerDateTimeRecurrence->Add(panelRecurrenceDays, 1, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerRecurrenceDays = new wxBoxSizer(wxHORIZONTAL);
    panelRecurrenceDays->SetSizer(sizerRecurrenceDays);
    
    wxBoxSizer* sizerRecurrence = new wxBoxSizer(wxHORIZONTAL);
    
    sizerRecurrenceDays->Add(sizerRecurrence, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    staticTextRecurrence = new wxStaticText(panelRecurrenceDays, wxID_ANY, _("Recur every"), wxDefaultPosition, wxDLG_UNIT(panelRecurrenceDays, wxSize(-1,-1)), 0);
    staticTextRecurrence->Hide();
    
    sizerRecurrence->Add(staticTextRecurrence, 1, wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    spinCtrlRecurrence = new wxSpinCtrl(panelRecurrenceDays, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(panelRecurrenceDays, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    spinCtrlRecurrence->Hide();
    spinCtrlRecurrence->SetRange(1, 999);
    spinCtrlRecurrence->SetValue(1);
    
    sizerRecurrence->Add(spinCtrlRecurrence, 0, wxALL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    staticTextRecurrenceUnit = new wxStaticText(panelRecurrenceDays, wxID_ANY, _("weeks on:"), wxDefaultPosition, wxDLG_UNIT(panelRecurrenceDays, wxSize(-1,-1)), wxST_NO_AUTORESIZE);
    staticTextRecurrenceUnit->Hide();
    
    sizerRecurrence->Add(staticTextRecurrenceUnit, 0, wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerDays = new wxBoxSizer(wxVERTICAL);
    
    sizerRecurrenceDays->Add(sizerDays, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString checkListBoxDaysArr;
    checkListBoxDaysArr.Add(_("Monday"));
    checkListBoxDaysArr.Add(_("Tuesday"));
    checkListBoxDaysArr.Add(_("Wednesday"));
    checkListBoxDaysArr.Add(_("Thursday"));
    checkListBoxDaysArr.Add(_("Friday"));
    checkListBoxDaysArr.Add(_("Saturday"));
    checkListBoxDaysArr.Add(_("Sunday"));
    checkListBoxDays = new wxCheckListBox(panelRecurrenceDays, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelRecurrenceDays, wxSize(-1,-1)), checkListBoxDaysArr, wxLB_NEEDED_SB|wxLB_HSCROLL|wxLB_SINGLE);
    checkListBoxDays->Hide();
    
    sizerDays->Add(checkListBoxDays, 0, wxALL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerButtons = new wxBoxSizer(wxHORIZONTAL);
    
    sizerNewTrigger->Add(sizerButtons, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    sizerButtons->Add(0, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    buttonAdd = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonAdd, 0, wxALL, WXC_FROM_DIP(5));
    
    buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonCancel, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("NewTriggerDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(NewTriggerDialogBase::OnCloseWindow), NULL, this);
    radioBoxFrequency->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(NewTriggerDialogBase::OnFrequencyRadioboxSelected), NULL, this);
    checkListBoxDays->Connect(wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, wxCommandEventHandler(NewTriggerDialogBase::OnDaysCheckListBoxToggled), NULL, this);
    buttonAdd->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewTriggerDialogBase::OnAddButtonClicked), NULL, this);
    buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewTriggerDialogBase::OnCancelButtonClicked), NULL, this);
    
}

NewTriggerDialogBase::~NewTriggerDialogBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(NewTriggerDialogBase::OnCloseWindow), NULL, this);
    radioBoxFrequency->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(NewTriggerDialogBase::OnFrequencyRadioboxSelected), NULL, this);
    checkListBoxDays->Disconnect(wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, wxCommandEventHandler(NewTriggerDialogBase::OnDaysCheckListBoxToggled), NULL, this);
    buttonAdd->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewTriggerDialogBase::OnAddButtonClicked), NULL, this);
    buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewTriggerDialogBase::OnCancelButtonClicked), NULL, this);
    
}

SettingsFrameBase::SettingsFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCEEDFInitBitmapResources();
        bBitmapLoaded = true;
    }
    this->Hide();
    
    wxBoxSizer* sizerSettings = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(sizerSettings);
    
    wxBoxSizer* sizerNotebook = new wxBoxSizer(wxVERTICAL);
    
    sizerSettings->Add(sizerNotebook, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    notebookSettings = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    notebookSettings->SetName(wxT("notebookSettings"));
    
    sizerNotebook->Add(notebookSettings, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    panelArchive = new wxPanel(notebookSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(notebookSettings, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    notebookSettings->AddPage(panelArchive, _("Archive"), true);
    
    wxBoxSizer* sizerArchive = new wxBoxSizer(wxVERTICAL);
    panelArchive->SetSizer(sizerArchive);
    
    notebookArchiveSettings = new wxNotebook(panelArchive, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelArchive, wxSize(-1,-1)), wxNB_FIXEDWIDTH|wxBK_DEFAULT);
    notebookArchiveSettings->SetName(wxT("notebookArchiveSettings"));
    
    sizerArchive->Add(notebookArchiveSettings, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    panelGeneral = new wxPanel(notebookArchiveSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(notebookArchiveSettings, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    notebookArchiveSettings->AddPage(panelGeneral, _("General"), true);
    
    wxBoxSizer* sizerGeneral = new wxBoxSizer(wxVERTICAL);
    panelGeneral->SetSizer(sizerGeneral);
    
    wxBoxSizer* sizerDestinationPath = new wxBoxSizer(wxVERTICAL);
    
    sizerGeneral->Add(sizerDestinationPath, 0, wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    staticTextDestinationPath = new wxStaticText(panelGeneral, wxID_ANY, _("Destination Path"), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), 0);
    
    sizerDestinationPath->Add(staticTextDestinationPath, 0, wxLEFT|wxTOP, WXC_FROM_DIP(5));
    
    dirPickerDestinationPath = new wxDirPickerCtrl(panelGeneral, wxID_ANY, wxEmptyString, _("Select a path for your backup archive"), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), wxDIRP_DEFAULT_STYLE);
    
    sizerDestinationPath->Add(dirPickerDestinationPath, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerArchiveName = new wxBoxSizer(wxVERTICAL);
    
    sizerGeneral->Add(sizerArchiveName, 0, wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    staticTextArchiveName = new wxStaticText(panelGeneral, wxID_ANY, _("Archive Name"), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), 0);
    
    sizerArchiveName->Add(staticTextArchiveName, 0, wxLEFT, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerName = new wxBoxSizer(wxHORIZONTAL);
    
    sizerArchiveName->Add(sizerName, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    textCtrlArchiveName = new wxTextCtrl(panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    textCtrlArchiveName->SetHint(wxT(""));
    #endif
    
    sizerName->Add(textCtrlArchiveName, 1, wxRIGHT|wxTOP|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    staticTextUnderscore1 = new wxStaticText(panelGeneral, wxID_ANY, _("_"), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), 0);
    
    sizerName->Add(staticTextUnderscore1, 0, wxBOTTOM|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    textCtrlDate = new wxTextCtrl(panelGeneral, wxID_ANY, wxT("*Current Date*"), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), wxTE_READONLY|wxTE_NO_VSCROLL|wxTE_CENTRE);
    #if wxVERSION_NUMBER >= 3000
    textCtrlDate->SetHint(wxT(""));
    #endif
    
    sizerName->Add(textCtrlDate, 0, wxALL, WXC_FROM_DIP(5));
    
    staticTextUnderscore2 = new wxStaticText(panelGeneral, wxID_ANY, _("_"), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), 0);
    
    sizerName->Add(staticTextUnderscore2, 0, wxBOTTOM|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    textCtrlTime = new wxTextCtrl(panelGeneral, wxID_ANY, wxT("*Current Time*"), wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), wxTE_READONLY|wxTE_NO_VSCROLL|wxTE_CENTRE);
    #if wxVERSION_NUMBER >= 3000
    textCtrlTime->SetHint(wxT(""));
    #endif
    
    sizerName->Add(textCtrlTime, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerCompressionUpdate = new wxBoxSizer(wxHORIZONTAL);
    
    sizerGeneral->Add(sizerCompressionUpdate, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerCompressionLevel = new wxStaticBoxSizer( new wxStaticBox(panelGeneral, wxID_ANY, _("Compression Level")), wxVERTICAL);
    
    sizerCompressionUpdate->Add(sizerCompressionLevel, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceCompressionLevelArr;
    choiceCompressionLevelArr.Add(wxT("Copy"));
    choiceCompressionLevelArr.Add(wxT("Fastest"));
    choiceCompressionLevelArr.Add(wxT("Fast"));
    choiceCompressionLevelArr.Add(wxT("Normal"));
    choiceCompressionLevelArr.Add(wxT("High"));
    choiceCompressionLevelArr.Add(wxT("Max"));
    choiceCompressionLevel = new wxChoice(panelGeneral, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), choiceCompressionLevelArr, 0);
    choiceCompressionLevel->SetSelection(3);
    
    sizerCompressionLevel->Add(choiceCompressionLevel, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    sizerCompressionUpdate->Add(0, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerUpdateMode = new wxStaticBoxSizer( new wxStaticBox(panelGeneral, wxID_ANY, _("Update Mode")), wxVERTICAL);
    
    sizerCompressionUpdate->Add(sizerUpdateMode, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceUpdateModeArr;
    choiceUpdateModeArr.Add(wxT("None"));
    choiceUpdateModeArr.Add(wxT("Append"));
    choiceUpdateModeArr.Add(wxT("Overwrite"));
    choiceUpdateMode = new wxChoice(panelGeneral, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelGeneral, wxSize(-1,-1)), choiceUpdateModeArr, 0);
    choiceUpdateMode->SetSelection(2);
    
    sizerUpdateMode->Add(choiceUpdateMode, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    choiceUpdateMode->SetMinSize(wxSize(100,-1));
    
    panelAdvanced = new wxPanel(notebookArchiveSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(notebookArchiveSettings, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    notebookArchiveSettings->AddPage(panelAdvanced, _("Advanced"), false);
    
    wxBoxSizer* sizerAdvanced = new wxBoxSizer(wxVERTICAL);
    panelAdvanced->SetSizer(sizerAdvanced);
    
    wxBoxSizer* sizerFormatCompressionDictionary = new wxBoxSizer(wxHORIZONTAL);
    
    sizerAdvanced->Add(sizerFormatCompressionDictionary, 0, wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString radioBoxFormatArr;
    radioBoxFormatArr.Add(_("*.7z"));
    radioBoxFormatArr.Add(_("*.zip"));
    radioBoxFormat = new wxRadioBox(panelAdvanced, wxID_ANY, _("Format"), wxDefaultPosition, wxDLG_UNIT(panelAdvanced, wxSize(-1,-1)), radioBoxFormatArr, 1, wxRA_SPECIFY_ROWS);
    radioBoxFormat->SetSelection(0);
    
    sizerFormatCompressionDictionary->Add(radioBoxFormat, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerCompressionMethod = new wxStaticBoxSizer( new wxStaticBox(panelAdvanced, wxID_ANY, _("Compression Method")), wxHORIZONTAL);
    
    sizerFormatCompressionDictionary->Add(sizerCompressionMethod, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceCompressionMethodArr;
    choiceCompressionMethodArr.Add(wxT("BZip2"));
    choiceCompressionMethodArr.Add(wxT("LZMA"));
    choiceCompressionMethodArr.Add(wxT("LZMA2"));
    choiceCompressionMethodArr.Add(wxT("PPMd"));
    choiceCompressionMethod = new wxChoice(panelAdvanced, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvanced, wxSize(-1,-1)), choiceCompressionMethodArr, 0);
    choiceCompressionMethod->SetSelection(2);
    
    sizerCompressionMethod->Add(choiceCompressionMethod, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    choiceCompressionMethod->SetMinSize(wxSize(100,-1));
    
    wxStaticBoxSizer* sizerDictionarySize = new wxStaticBoxSizer( new wxStaticBox(panelAdvanced, wxID_ANY, _("Dictionary Size")), wxVERTICAL);
    
    sizerFormatCompressionDictionary->Add(sizerDictionarySize, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceDictionarySizeArr;
    choiceDictionarySizeArr.Add(wxT("64 KB"));
    choiceDictionarySizeArr.Add(wxT("256 KB"));
    choiceDictionarySizeArr.Add(wxT("1 MB"));
    choiceDictionarySizeArr.Add(wxT("2 MB"));
    choiceDictionarySizeArr.Add(wxT("4 MB"));
    choiceDictionarySizeArr.Add(wxT("8 MB"));
    choiceDictionarySizeArr.Add(wxT("16 MB"));
    choiceDictionarySizeArr.Add(wxT("32 MB"));
    choiceDictionarySizeArr.Add(wxT("64 MB"));
    choiceDictionarySizeArr.Add(wxT("128 MB"));
    choiceDictionarySizeArr.Add(wxT("256 MB"));
    choiceDictionarySizeArr.Add(wxT("512 MB"));
    choiceDictionarySizeArr.Add(wxT("1024 MB"));
    choiceDictionarySize = new wxChoice(panelAdvanced, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvanced, wxSize(-1,-1)), choiceDictionarySizeArr, 0);
    choiceDictionarySize->SetSelection(6);
    
    sizerDictionarySize->Add(choiceDictionarySize, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerThreadVolumeSolid = new wxBoxSizer(wxHORIZONTAL);
    
    sizerAdvanced->Add(sizerThreadVolumeSolid, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerThreadCount = new wxStaticBoxSizer( new wxStaticBox(panelAdvanced, wxID_ANY, _("Thread Count")), wxVERTICAL);
    
    sizerThreadVolumeSolid->Add(sizerThreadCount, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceThreadCountArr;
    choiceThreadCount = new wxChoice(panelAdvanced, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvanced, wxSize(-1,-1)), choiceThreadCountArr, 0);
    
    sizerThreadCount->Add(choiceThreadCount, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerVolumeSize = new wxStaticBoxSizer( new wxStaticBox(panelAdvanced, wxID_ANY, _("Volume Size")), wxHORIZONTAL);
    
    sizerThreadVolumeSolid->Add(sizerVolumeSize, 0, wxALL, WXC_FROM_DIP(5));
    
    textCtrlVolumeSize = new wxTextCtrl(panelAdvanced, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(panelAdvanced, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    textCtrlVolumeSize->SetHint(wxT(""));
    #endif
    
    sizerVolumeSize->Add(textCtrlVolumeSize, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceVolumeSizeUnitArr;
    choiceVolumeSizeUnitArr.Add(wxT("B"));
    choiceVolumeSizeUnitArr.Add(wxT("KB"));
    choiceVolumeSizeUnitArr.Add(wxT("MB"));
    choiceVolumeSizeUnitArr.Add(wxT("GB"));
    choiceVolumeSizeUnit = new wxChoice(panelAdvanced, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvanced, wxSize(-1,-1)), choiceVolumeSizeUnitArr, 0);
    choiceVolumeSizeUnit->SetSelection(2);
    
    sizerVolumeSize->Add(choiceVolumeSizeUnit, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerSolidMode = new wxBoxSizer(wxVERTICAL);
    
    sizerThreadVolumeSolid->Add(sizerSolidMode, 1, wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    checkBoxSolidMode = new wxCheckBox(panelAdvanced, wxID_ANY, _("Solid Mode"), wxDefaultPosition, wxDLG_UNIT(panelAdvanced, wxSize(-1,-1)), 0);
    checkBoxSolidMode->SetValue(false);
    
    sizerSolidMode->Add(checkBoxSolidMode, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    panelSchedule = new wxPanel(notebookSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(notebookSettings, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    notebookSettings->AddPage(panelSchedule, _("Schedule"), false);
    
    wxBoxSizer* sizerSchedule = new wxBoxSizer(wxHORIZONTAL);
    panelSchedule->SetSizer(sizerSchedule);
    
    wxBoxSizer* sizerTriggerList = new wxBoxSizer(wxVERTICAL);
    
    sizerSchedule->Add(sizerTriggerList, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    staticTextTriggerList = new wxStaticText(panelSchedule, wxID_ANY, _("Active Triggers"), wxDefaultPosition, wxDLG_UNIT(panelSchedule, wxSize(-1,-1)), 0);
    
    sizerTriggerList->Add(staticTextTriggerList, 0, wxLEFT|wxRIGHT|wxTOP, WXC_FROM_DIP(5));
    
    triggerList = new wxListCtrl(panelSchedule, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelSchedule, wxSize(-1,-1)), wxLC_SINGLE_SEL|wxLC_REPORT);
    
    sizerTriggerList->Add(triggerList, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    triggerList->InsertColumn(triggerList->GetColumnCount(), _("Type"), wxLIST_FORMAT_LEFT, -1);
    triggerList->InsertColumn(triggerList->GetColumnCount(), _("Details"), wxLIST_FORMAT_LEFT, -1);
    wxBoxSizer* sizerTriggerListButtons = new wxBoxSizer(wxHORIZONTAL);
    
    sizerTriggerList->Add(sizerTriggerListButtons, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    buttonNew = new wxButton(panelSchedule, wxID_ANY, _("New"), wxDefaultPosition, wxDLG_UNIT(panelSchedule, wxSize(-1,-1)), 0);
    
    sizerTriggerListButtons->Add(buttonNew, 0, wxALL, WXC_FROM_DIP(5));
    
    buttonRemove = new wxButton(panelSchedule, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(panelSchedule, wxSize(-1,-1)), 0);
    buttonRemove->Enable(false);
    
    sizerTriggerListButtons->Add(buttonRemove, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerButtons = new wxBoxSizer(wxHORIZONTAL);
    
    sizerSettings->Add(sizerButtons, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    sizerButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    buttonSave = new wxButton(this, wxID_ANY, _("Save"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    buttonSave->SetDefault();
    
    sizerButtons->Add(buttonSave, 0, wxALL, WXC_FROM_DIP(5));
    
    buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonCancel, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("SettingsFrameBase"));
    SetMinClientSize(wxSize(480,-1));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(SettingsFrameBase::OnCloseWindow), NULL, this);
    dirPickerDestinationPath->Connect(wxEVT_COMMAND_DIRPICKER_CHANGED, wxFileDirPickerEventHandler(SettingsFrameBase::OnDestinationPathDirPickerChanged), NULL, this);
    textCtrlArchiveName->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(SettingsFrameBase::OnArchiveNameTextUpdated), NULL, this);
    choiceCompressionLevel->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnCompressionLevelChoiceSelected), NULL, this);
    choiceUpdateMode->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnUpdateModeChoiceSelected), NULL, this);
    radioBoxFormat->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnFormatRadioBoxSelected), NULL, this);
    choiceCompressionMethod->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnCompressionMethodChoiceSelected), NULL, this);
    choiceDictionarySize->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnDictionarySizeChoiceSelected), NULL, this);
    choiceThreadCount->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnThreadCountChoiceSelected), NULL, this);
    textCtrlVolumeSize->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(SettingsFrameBase::OnVolumeSizeTextUpdated), NULL, this);
    choiceVolumeSizeUnit->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnVolumeSizeUnitChoiceSelected), NULL, this);
    checkBoxSolidMode->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnSolidModeCheckboxClicked), NULL, this);
    triggerList->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(SettingsFrameBase::OnTriggerListItemSelected), NULL, this);
    triggerList->Connect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(SettingsFrameBase::OnTriggerListItemDeselected), NULL, this);
    buttonNew->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnNewButtonClicked), NULL, this);
    buttonRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnRemoveButtonClicked), NULL, this);
    buttonSave->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnSaveButtonClicked), NULL, this);
    buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnCancelButtonClicked), NULL, this);
    
}

SettingsFrameBase::~SettingsFrameBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(SettingsFrameBase::OnCloseWindow), NULL, this);
    dirPickerDestinationPath->Disconnect(wxEVT_COMMAND_DIRPICKER_CHANGED, wxFileDirPickerEventHandler(SettingsFrameBase::OnDestinationPathDirPickerChanged), NULL, this);
    textCtrlArchiveName->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(SettingsFrameBase::OnArchiveNameTextUpdated), NULL, this);
    choiceCompressionLevel->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnCompressionLevelChoiceSelected), NULL, this);
    choiceUpdateMode->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnUpdateModeChoiceSelected), NULL, this);
    radioBoxFormat->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnFormatRadioBoxSelected), NULL, this);
    choiceCompressionMethod->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnCompressionMethodChoiceSelected), NULL, this);
    choiceDictionarySize->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnDictionarySizeChoiceSelected), NULL, this);
    choiceThreadCount->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnThreadCountChoiceSelected), NULL, this);
    textCtrlVolumeSize->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(SettingsFrameBase::OnVolumeSizeTextUpdated), NULL, this);
    choiceVolumeSizeUnit->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(SettingsFrameBase::OnVolumeSizeUnitChoiceSelected), NULL, this);
    checkBoxSolidMode->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnSolidModeCheckboxClicked), NULL, this);
    triggerList->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(SettingsFrameBase::OnTriggerListItemSelected), NULL, this);
    triggerList->Disconnect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(SettingsFrameBase::OnTriggerListItemDeselected), NULL, this);
    buttonNew->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnNewButtonClicked), NULL, this);
    buttonRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnRemoveButtonClicked), NULL, this);
    buttonSave->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnSaveButtonClicked), NULL, this);
    buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SettingsFrameBase::OnCancelButtonClicked), NULL, this);
    
}

ManualBackupDialogBase::ManualBackupDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCEEDFInitBitmapResources();
        bBitmapLoaded = true;
    }
    this->Hide();
    
    wxBoxSizer* sizerArchiveOptions = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(sizerArchiveOptions);
    
    wxBoxSizer* sizerNotebook = new wxBoxSizer(wxVERTICAL);
    
    sizerArchiveOptions->Add(sizerNotebook, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    notebookArchiveSettings = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxNB_FIXEDWIDTH|wxBK_DEFAULT);
    notebookArchiveSettings->SetName(wxT("notebookArchiveSettings"));
    
    sizerNotebook->Add(notebookArchiveSettings, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    panelGeneralSettings = new wxPanel(notebookArchiveSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(notebookArchiveSettings, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    notebookArchiveSettings->AddPage(panelGeneralSettings, _("General"), true);
    
    wxBoxSizer* sizerGeneralSettings = new wxBoxSizer(wxVERTICAL);
    panelGeneralSettings->SetSizer(sizerGeneralSettings);
    
    wxBoxSizer* sizerDestinationPath = new wxBoxSizer(wxVERTICAL);
    
    sizerGeneralSettings->Add(sizerDestinationPath, 0, wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    staticTextDestinationPath = new wxStaticText(panelGeneralSettings, wxID_ANY, _("Destination Path"), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), 0);
    
    sizerDestinationPath->Add(staticTextDestinationPath, 0, wxLEFT|wxTOP, WXC_FROM_DIP(5));
    
    dirPickerDestinationPath = new wxDirPickerCtrl(panelGeneralSettings, wxID_ANY, wxEmptyString, _("Select a path for your backup archive"), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), wxDIRP_DEFAULT_STYLE);
    
    sizerDestinationPath->Add(dirPickerDestinationPath, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerArchiveName = new wxBoxSizer(wxVERTICAL);
    
    sizerGeneralSettings->Add(sizerArchiveName, 0, wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    staticTextArchiveName = new wxStaticText(panelGeneralSettings, wxID_ANY, _("Archive Name"), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), 0);
    
    sizerArchiveName->Add(staticTextArchiveName, 0, wxLEFT, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerName = new wxBoxSizer(wxHORIZONTAL);
    
    sizerArchiveName->Add(sizerName, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    textCtrlArchiveName = new wxTextCtrl(panelGeneralSettings, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    textCtrlArchiveName->SetHint(wxT(""));
    #endif
    
    sizerName->Add(textCtrlArchiveName, 1, wxRIGHT|wxTOP|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    staticTextUnderscore1 = new wxStaticText(panelGeneralSettings, wxID_ANY, _("_"), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), 0);
    
    sizerName->Add(staticTextUnderscore1, 0, wxBOTTOM|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    textCtrlDate = new wxTextCtrl(panelGeneralSettings, wxID_ANY, wxT("*Current Date*"), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), wxTE_READONLY|wxTE_NO_VSCROLL|wxTE_CENTRE);
    #if wxVERSION_NUMBER >= 3000
    textCtrlDate->SetHint(wxT(""));
    #endif
    
    sizerName->Add(textCtrlDate, 0, wxALL, WXC_FROM_DIP(5));
    
    staticTextUnderscore2 = new wxStaticText(panelGeneralSettings, wxID_ANY, _("_"), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), 0);
    
    sizerName->Add(staticTextUnderscore2, 0, wxBOTTOM|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    textCtrlTime = new wxTextCtrl(panelGeneralSettings, wxID_ANY, wxT("*Current Time*"), wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), wxTE_READONLY|wxTE_NO_VSCROLL|wxTE_CENTRE);
    #if wxVERSION_NUMBER >= 3000
    textCtrlTime->SetHint(wxT(""));
    #endif
    
    sizerName->Add(textCtrlTime, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerCompressionUpdate = new wxBoxSizer(wxHORIZONTAL);
    
    sizerGeneralSettings->Add(sizerCompressionUpdate, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerCompressionLevel = new wxStaticBoxSizer( new wxStaticBox(panelGeneralSettings, wxID_ANY, _("Compression Level")), wxVERTICAL);
    
    sizerCompressionUpdate->Add(sizerCompressionLevel, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceCompressionLevelArr;
    choiceCompressionLevelArr.Add(wxT("Copy"));
    choiceCompressionLevelArr.Add(wxT("Fastest"));
    choiceCompressionLevelArr.Add(wxT("Fast"));
    choiceCompressionLevelArr.Add(wxT("Normal"));
    choiceCompressionLevelArr.Add(wxT("High"));
    choiceCompressionLevelArr.Add(wxT("Max"));
    choiceCompressionLevel = new wxChoice(panelGeneralSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), choiceCompressionLevelArr, 0);
    choiceCompressionLevel->SetSelection(3);
    
    sizerCompressionLevel->Add(choiceCompressionLevel, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    sizerCompressionUpdate->Add(0, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerUpdateMode = new wxStaticBoxSizer( new wxStaticBox(panelGeneralSettings, wxID_ANY, _("Update Mode")), wxVERTICAL);
    
    sizerCompressionUpdate->Add(sizerUpdateMode, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceUpdateModeArr;
    choiceUpdateModeArr.Add(wxT("None"));
    choiceUpdateModeArr.Add(wxT("Append"));
    choiceUpdateModeArr.Add(wxT("Overwrite"));
    choiceUpdateMode = new wxChoice(panelGeneralSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelGeneralSettings, wxSize(-1,-1)), choiceUpdateModeArr, 0);
    choiceUpdateMode->SetSelection(2);
    
    sizerUpdateMode->Add(choiceUpdateMode, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    choiceUpdateMode->SetMinSize(wxSize(100,-1));
    
    panelAdvancedSettings = new wxPanel(notebookArchiveSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(notebookArchiveSettings, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    notebookArchiveSettings->AddPage(panelAdvancedSettings, _("Advanced"), false);
    
    wxBoxSizer* sizerAdvancedSettings = new wxBoxSizer(wxVERTICAL);
    panelAdvancedSettings->SetSizer(sizerAdvancedSettings);
    
    wxBoxSizer* sizerFormatCompressionDictionary = new wxBoxSizer(wxHORIZONTAL);
    
    sizerAdvancedSettings->Add(sizerFormatCompressionDictionary, 0, wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString radioBoxFormatArr;
    radioBoxFormatArr.Add(_("*.7z"));
    radioBoxFormatArr.Add(_("*.zip"));
    radioBoxFormat = new wxRadioBox(panelAdvancedSettings, wxID_ANY, _("Format"), wxDefaultPosition, wxDLG_UNIT(panelAdvancedSettings, wxSize(-1,-1)), radioBoxFormatArr, 1, wxRA_SPECIFY_ROWS);
    radioBoxFormat->SetSelection(0);
    
    sizerFormatCompressionDictionary->Add(radioBoxFormat, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerCompressionMethod = new wxStaticBoxSizer( new wxStaticBox(panelAdvancedSettings, wxID_ANY, _("Compression Method")), wxHORIZONTAL);
    
    sizerFormatCompressionDictionary->Add(sizerCompressionMethod, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceCompressionMethodArr;
    choiceCompressionMethodArr.Add(wxT("BZip2"));
    choiceCompressionMethodArr.Add(wxT("LZMA"));
    choiceCompressionMethodArr.Add(wxT("LZMA2"));
    choiceCompressionMethodArr.Add(wxT("PPMd"));
    choiceCompressionMethod = new wxChoice(panelAdvancedSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvancedSettings, wxSize(-1,-1)), choiceCompressionMethodArr, 0);
    choiceCompressionMethod->SetSelection(2);
    
    sizerCompressionMethod->Add(choiceCompressionMethod, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    choiceCompressionMethod->SetMinSize(wxSize(100,-1));
    
    wxStaticBoxSizer* sizerDictionarySize = new wxStaticBoxSizer( new wxStaticBox(panelAdvancedSettings, wxID_ANY, _("Dictionary Size")), wxVERTICAL);
    
    sizerFormatCompressionDictionary->Add(sizerDictionarySize, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceDictionarySizeArr;
    choiceDictionarySizeArr.Add(wxT("64 KB"));
    choiceDictionarySizeArr.Add(wxT("256 KB"));
    choiceDictionarySizeArr.Add(wxT("1 MB"));
    choiceDictionarySizeArr.Add(wxT("2 MB"));
    choiceDictionarySizeArr.Add(wxT("4 MB"));
    choiceDictionarySizeArr.Add(wxT("8 MB"));
    choiceDictionarySizeArr.Add(wxT("16 MB"));
    choiceDictionarySizeArr.Add(wxT("32 MB"));
    choiceDictionarySizeArr.Add(wxT("64 MB"));
    choiceDictionarySizeArr.Add(wxT("128 MB"));
    choiceDictionarySizeArr.Add(wxT("256 MB"));
    choiceDictionarySizeArr.Add(wxT("512 MB"));
    choiceDictionarySizeArr.Add(wxT("1024 MB"));
    choiceDictionarySize = new wxChoice(panelAdvancedSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvancedSettings, wxSize(-1,-1)), choiceDictionarySizeArr, 0);
    choiceDictionarySize->SetSelection(6);
    
    sizerDictionarySize->Add(choiceDictionarySize, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerThreadVolumeSolid = new wxBoxSizer(wxHORIZONTAL);
    
    sizerAdvancedSettings->Add(sizerThreadVolumeSolid, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerThreadCount = new wxStaticBoxSizer( new wxStaticBox(panelAdvancedSettings, wxID_ANY, _("Thread Count")), wxVERTICAL);
    
    sizerThreadVolumeSolid->Add(sizerThreadCount, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceThreadCountArr;
    choiceThreadCount = new wxChoice(panelAdvancedSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvancedSettings, wxSize(-1,-1)), choiceThreadCountArr, 0);
    
    sizerThreadCount->Add(choiceThreadCount, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* sizerVolumeSize = new wxStaticBoxSizer( new wxStaticBox(panelAdvancedSettings, wxID_ANY, _("Volume Size")), wxHORIZONTAL);
    
    sizerThreadVolumeSolid->Add(sizerVolumeSize, 0, wxALL, WXC_FROM_DIP(5));
    
    textCtrlVolumeSize = new wxTextCtrl(panelAdvancedSettings, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(panelAdvancedSettings, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    textCtrlVolumeSize->SetHint(wxT(""));
    #endif
    
    sizerVolumeSize->Add(textCtrlVolumeSize, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString choiceVolumeSizeUnitArr;
    choiceVolumeSizeUnitArr.Add(wxT("B"));
    choiceVolumeSizeUnitArr.Add(wxT("KB"));
    choiceVolumeSizeUnitArr.Add(wxT("MB"));
    choiceVolumeSizeUnitArr.Add(wxT("GB"));
    choiceVolumeSizeUnit = new wxChoice(panelAdvancedSettings, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(panelAdvancedSettings, wxSize(-1,-1)), choiceVolumeSizeUnitArr, 0);
    choiceVolumeSizeUnit->SetSelection(2);
    
    sizerVolumeSize->Add(choiceVolumeSizeUnit, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerSolidMode = new wxBoxSizer(wxVERTICAL);
    
    sizerThreadVolumeSolid->Add(sizerSolidMode, 1, wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    checkBoxSolidMode = new wxCheckBox(panelAdvancedSettings, wxID_ANY, _("Solid Mode"), wxDefaultPosition, wxDLG_UNIT(panelAdvancedSettings, wxSize(-1,-1)), 0);
    checkBoxSolidMode->SetValue(false);
    
    sizerSolidMode->Add(checkBoxSolidMode, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* sizerButtons = new wxBoxSizer(wxHORIZONTAL);
    
    sizerArchiveOptions->Add(sizerButtons, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    sizerButtons->Add(0, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    buttonGo = new wxButton(this, wxID_ANY, _("Go"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonGo, 0, wxALL, WXC_FROM_DIP(5));
    
    buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonCancel, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("ManualBackupDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(ManualBackupDialogBase::OnCloseWindow), NULL, this);
    radioBoxFormat->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(ManualBackupDialogBase::OnFormatRadioBoxSelected), NULL, this);
    choiceCompressionMethod->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(ManualBackupDialogBase::OnCompressionMethodChoiceSelected), NULL, this);
    buttonGo->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ManualBackupDialogBase::OnGoButtonClicked), NULL, this);
    buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ManualBackupDialogBase::OnCancelButtonClicked), NULL, this);
    
}

ManualBackupDialogBase::~ManualBackupDialogBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(ManualBackupDialogBase::OnCloseWindow), NULL, this);
    radioBoxFormat->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(ManualBackupDialogBase::OnFormatRadioBoxSelected), NULL, this);
    choiceCompressionMethod->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(ManualBackupDialogBase::OnCompressionMethodChoiceSelected), NULL, this);
    buttonGo->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ManualBackupDialogBase::OnGoButtonClicked), NULL, this);
    buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ManualBackupDialogBase::OnCancelButtonClicked), NULL, this);
    
}

MainFrameBase::MainFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCEEDFInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* sizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(sizerMain);
    
    wxBoxSizer* sizerMainList = new wxBoxSizer(wxVERTICAL);
    
    sizerMain->Add(sizerMainList, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    mainList = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_REPORT);
    
    sizerMainList->Add(mainList, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    mainList->InsertColumn(mainList->GetColumnCount(), _("Name"), wxLIST_FORMAT_LEFT, -1);
    mainList->InsertColumn(mainList->GetColumnCount(), _("Size"), wxLIST_FORMAT_LEFT, -1);
    mainList->InsertColumn(mainList->GetColumnCount(), _("Path"), wxLIST_FORMAT_LEFT, -2);
    wxGridSizer* sizerButtons = new wxGridSizer(1, 6, 0, 0);
    
    sizerMain->Add(sizerButtons, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    buttonArchive = new wxButton(this, wxID_ANY, _("Archive"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonArchive, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    buttonAddDirectory = new wxButton(this, wxID_ANY, _("Add Folder"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonAddDirectory, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    buttonAddFile = new wxButton(this, wxID_ANY, _("Add File"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonAddFile, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    buttonRemove = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    buttonRemove->Enable(false);
    
    sizerButtons->Add(buttonRemove, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    sizerButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    buttonSettings = new wxButton(this, wxID_ANY, _("Settings"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    sizerButtons->Add(buttonSettings, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("MainFrameBase"));
    SetMinClientSize(wxSize(640,360));
    SetSize(wxDLG_UNIT(this, wxSize(640,360)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    mainList->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBase::OnMainListItemSelected), NULL, this);
    mainList->Connect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(MainFrameBase::OnMainListItemDeselected), NULL, this);
    buttonArchive->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnArchiveButtonClicked), NULL, this);
    buttonAddDirectory->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnAddDirectoryButtonClicked), NULL, this);
    buttonAddFile->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnAddFileButtonClicked), NULL, this);
    buttonRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnRemoveButtonClicked), NULL, this);
    buttonSettings->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnSettingsButtonClicked), NULL, this);
    
}

MainFrameBase::~MainFrameBase()
{
    mainList->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBase::OnMainListItemSelected), NULL, this);
    mainList->Disconnect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(MainFrameBase::OnMainListItemDeselected), NULL, this);
    buttonArchive->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnArchiveButtonClicked), NULL, this);
    buttonAddDirectory->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnAddDirectoryButtonClicked), NULL, this);
    buttonAddFile->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnAddFileButtonClicked), NULL, this);
    buttonRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnRemoveButtonClicked), NULL, this);
    buttonSettings->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBase::OnSettingsButtonClicked), NULL, this);
    
}
